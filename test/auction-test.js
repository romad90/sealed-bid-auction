;`use strict`

const chai = require('chai')
const expect = chai.expect
const AVLTree = require('../lib/avl_tree.js')

describe('Auction', () => {
  it('getTreeNodeWinner(), should return E bidder as the winner', done => {
    const bst = new AVLTree()
    bst.insert(100)
    bst.insert(110, 'A')
    bst.insert(130, 'A')
    bst.insert(125, 'C')
    bst.insert(105, 'D')
    bst.insert(115, 'D')
    bst.insert(90, 'D')
    bst.insert(132, 'E')
    bst.insert(135, 'E')
    bst.insert(140, 'E')
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode.bidders[0]).to.be.eql('E')
    done()
  })
  it('getTreeNodeWinner(), highest bid (made by E) should be greater than the reservePrice', done => {
    const bst = new AVLTree()
    bst.insert(100)
    bst.insert(110, 'A')
    bst.insert(130, 'A')
    bst.insert(125, 'C')
    bst.insert(105, 'D')
    bst.insert(115, 'D')
    bst.insert(90, 'D')
    bst.insert(132, 'E')
    bst.insert(135, 'E')
    bst.insert(140, 'E')
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode.key).to.be.gt(bst.reservePrice)
    done()
  })
  it('getTreeNodeWinner(), should NOT return the max tree node(winner), because there is no bids', done => {
    const bst = new AVLTree()
    bst.insert(15)
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode).to.be.eql(false)
    done()
  })
  it('getTreeNodeWinner(), should NOT return the max tree node(winner), because there is two bidders at the highest amount.', done => {
    const bst = new AVLTree()
    bst.insert(15)
    bst.insert(10, 'alfa')
    bst.insert(20, 'bravo')
    bst.insert(16, 'echo')
    bst.insert(25, 'foxtrot')
    bst.insert(25, 'golf')
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode).to.be.eql(false)
    done()
  })
  it('getTreeNodeWinner(), should NOT return the max tree node(winner), because all bids are lower than the start price.', done => {
    const bst = new AVLTree()
    bst.insert(15)
    bst.insert(9, 'alfa')
    bst.insert(2, 'foxtrot')
    bst.insert(5, 'bravo')
    bst.insert(13, 'echo')
    bst.insert(14, 'foxtrot')
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode).to.be.eql(false)
    done()
  })
  it('getTreeNodeWinner(), should NOT return the max tree node(winner), because the highest bid is equal to the start price.', done => {
    const bst = new AVLTree()
    bst.insert(15)
    bst.insert(9, 'alfa')
    bst.insert(2, 'foxtrot')
    bst.insert(5, 'bravo')
    bst.insert(13, 'echo')
    bst.insert(15, 'foxtrot')
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode).to.be.eql(false)
    done()
  })
  it('getTreeNodeWinningPrice(), the winning-price should be equal to 20(non-winning buyer above the start price)', done => {
    const bst = new AVLTree()
    bst.insert(15)
    bst.insert(10, 'alfa')
    bst.insert(20, 'bravo')
    bst.insert(16, 'echo')
    bst.insert(25, 'foxtrot')
    const maxTreeNode = bst.getTreeNodeWinner()
    const winningPriceTreeNode = bst.getTreeNodeWinningPrice(
      bst.root,
      maxTreeNode
    )
    expect(winningPriceTreeNode.key).to.be.eql(20)
    done()
  })
  it('getTreeNodeWinningPrice(), the winning-price should be equal to 21 (start price because no bids are greater)', done => {
    const bst = new AVLTree()
    bst.insert(21)
    bst.insert(10, 'alfa')
    bst.insert(23, 'foxtrot')
    bst.insert(20, 'bravo')
    bst.insert(16, 'echo')
    bst.insert(25, 'foxtrot')
    const maxTreeNode = bst.getTreeNodeWinner()
    const winningPriceTreeNode = bst.getTreeNodeWinningPrice(
      bst.root,
      maxTreeNode
    )
    expect(winningPriceTreeNode.key).to.be.eql(21)
    done()
  })
  it('getTreeNodeWinningPrice(), should NOT return the winning-price because from the higher bid is equal to the start price', done => {
    const bst = new AVLTree()
    bst.insert(15)
    bst.insert(9, 'alfa')
    bst.insert(2, 'foxtrot')
    bst.insert(5, 'bravo')
    bst.insert(14, 'echo')
    bst.insert(15, 'foxtrot')
    const maxTreeNode = bst.getTreeNodeWinner()
    expect(maxTreeNode).to.be.eql(false)
    done()
  })
  it('getTreeNodeWinningPrice(), should NOT return the winning-price because from the start all bids are lower the start price', done => {
    const bst = new AVLTree()
    bst.insert(15)
    bst.insert(9, 'alfa')
    bst.insert(2, 'foxtrot')
    bst.insert(5, 'bravo')
    bst.insert(13, 'echo')
    bst.insert(14, 'foxtrot')
    const maxTreeNode = bst.getTreeNodeWinner()
    const winningPriceTreeNode = bst.getTreeNodeWinningPrice(
      bst.root,
      maxTreeNode
    )
    expect(winningPriceTreeNode).to.be.eql(false)
    done()
  })
})
